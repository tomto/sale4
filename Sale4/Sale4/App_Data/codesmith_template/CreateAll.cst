<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="true" ResponseEncoding="UTF-8" Description="根据数据库创建" %>

<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context" Description="DB" %>
<%@ Property Name="Tables" Type="SchemaExplorer.TableSchemaCollection" Category="Source" %>

<%@ Property Name="Name" Type="String" Category="Context" Description="ProjectName" %>
<%@ Property Name="DevelopersName" Type="String" Category="About" Default="" Description="开发者" %>
<%@ Property Name="DevelopersEmail" Type="String" Category="About" Default="" Description="开发者Email" %>


<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %> 
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%
// This is done so that we can make some assumptions about what each table 
// can contain.
Tables = TableUtilities.FilterTables(Tables);
%>  <%
//检查输出目录，并创建之
if(!Directory.Exists(OutputDirectory)) Directory.CreateDirectory(OutputDirectory);
 
/*
    载入模板
*/
	CodeTemplate Model = GetCodeTemplate("ModelCs.cst");		
	CodeTemplate Bll = GetCodeTemplate("BLLCs.cst");
	
	
	
	
%>

<%
/*
    设置输出目录
*/
//模块目录
string ModelDirectory = OutputDirectory + "\\"+NameSpace+".Model\\";
//Bll
string BllDirectory = OutputDirectory + "\\"+NameSpace+".BLL\\";


/*
    检查目录，并创建他
*/
if(!Directory.Exists(ModelDirectory)) Directory.CreateDirectory(ModelDirectory);
if(!Directory.Exists(BllDirectory)) Directory.CreateDirectory(BllDirectory);

%>
Create completed!

<% 
//Render Files
for (int i = 0; i < Tables.Count; i++)
{
    RenderFileUsingProperties(ModelDirectory + "Model_"+GetClassName(Tables[i]) + ".cs",true,ref Model,Tables[i]);
	RenderFileUsingProperties(BllDirectory + "BLL_"+ GetClassName(Tables[i]) + ".cs",true,ref Bll,Tables[i]);
}
%>

<script runat="template">
#region Properties
    #region NameSpace
	private string _NameSpace = "WebInfo";
    [Category("Namespaces")]
	[Description("类的命名空间")]
    public string NameSpace
    {
     	get 
		{
			return _NameSpace;
		}
     	set 
    	{
    		_NameSpace = value;
    	}
    }
	#endregion
	
    #region Namespaces
	/*
	private string _BLLNamespace = "ElfinNet.BLL";
    [Category("Namespaces")]        
    public string BLLNamespace
    {
     	get 
		{
			return _BLLNamespace;
		}
     	set 
    	{
    		_BLLNamespace = value;
    	}
    }
	
	private string _DALFactoryNamespace = "ElfinNet.DALFactory";
    [Category("Namespaces")]        
    public string DALFactoryNamespace
    {
     	get 
		{
			return _DALFactoryNamespace;
		}
     	set 
    	{
    		_DALFactoryNamespace = value;
    	}
    }
	
	private string _IDALNamespace = "ElfinNet.IDAL";
    [Category("Namespaces")]        		
    public string IDALNamespace
    {
     	get 
		{
			return _IDALNamespace;
		}
     	set 
    	{
    		_IDALNamespace = value;
    	}
    }
	
	private string _ModelNamespace = "ElfinNet.Model";
    [Category("Namespaces")]        		
    public string ModelNamespace
    {
     	get 
		{
			return _ModelNamespace;
		}
     	set 
    	{
    		_ModelNamespace = value;
    	}
    }
	private string _SQLServerDALNamespace = "ElfinNet.SQLServerDAL";
    [Category("Namespaces")]        		
    public string SQLServerDALNamespace
    {
     	get 
		{
			return _SQLServerDALNamespace;
		}
     	set 
    	{
    		_SQLServerDALNamespace = value;
    	}
    }
	*/
	#endregion
	
	#region Database Properties
	
	private string _DBName = "DefaultDB";
    [Category("Database")]
	[Description("Database Name.")]
    public string DBName
    {
     	get 
		{
			return _DBName;
		}
     	set 
    	{
    		_DBName = value;
    	}
    }
	private string _Prefix = "USP_";
    [Category("Database")]
	[Description("存储过程前缀")]
    public string Prefix
    {
     	get 
		{
			return _Prefix;
		}
     	set 
    	{
    		_Prefix = value;
    	}
    }
	#endregion
	
    #region Output
    private string _outputDirectory = String.Empty;
	
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	[Category("General")]
	[Description("文档输出目录")]
	[DefaultValue("")]
	public string OutputDirectory 
	{ 
		get
		{
			if (_outputDirectory.Length == 0)
			{
				return @"D:\ElfinNet\";
			}
			else
			{
				return _outputDirectory;
			}
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			_outputDirectory = value;
		} 
	}
	#endregion
	
	#region Cache
	private bool _Cache = true;
    [Category("Cache")]
	[Description("User cache in DALFactory.")]
    public bool Cache
    {
     	get 
		{
			return _Cache;
		}
     	set 
    	{
    		_Cache = value;
    	}
    }
	#endregion
	
	#region Path
	private string _Path = "DAL";
    [Category("Path")] 
	[Description("SQLServerDAL Path.")]
    public string Path
    {
     	get 
		{
			return _Path;
		}
     	set 
    	{
    		_Path = value;
    	}
    }
	#endregion
	
	#region DBList
    private CodeSmith.CustomProperties.StringCollection _DBList = 
	  new CodeSmith.CustomProperties.StringCollection(new string[]{"DefaultDB"});

    [CodeTemplateProperty(CodeTemplatePropertyOption.Required)]
	[Category("Database")]
	[Description("Database List")]
	public CodeSmith.CustomProperties.StringCollection DBList
	{ 
		get
		{
			if(_DBList==null || _DBList.Count<=0 || _DBList[0].Length==0)
			    return null;
			return _DBList;
		}
		set
		{
			if(value==null || value.Count<=0)
			{
			    _DBList = null;
			}
			else
			{
			    _DBList = value;
			}
		} 
	}
	#endregion
#endregion

#region Methods
	#region Get Template
	public CodeTemplate GetCodeTemplate(string TemplateName)
	{			
		CodeTemplate template;
		CodeTemplateCompiler compiler = new CodeTemplateCompiler(this.CodeTemplateInfo.DirectoryName+TemplateName);
		
		compiler.Compile(); 
     
		if (compiler.Errors.Count == 0) 
		{ 
			template = compiler.CreateInstance();
		} 
		else 
		{ 
			System.Text.StringBuilder errorMessage = new System.Text.StringBuilder();				
			for (int i = 0; i < compiler.Errors.Count; i++) 
			{
				errorMessage.Append(compiler.Errors[i].ToString()).Append("\n");
			} 
			throw new ApplicationException(errorMessage.ToString());
		} 
		      
		return template;
	}
	#endregion
	
	#region Render File
	/// Copies all properties to a template
	/// Renders the file 
	/// NB. the overrite property
	public void RenderFileUsingProperties(string fullPath, bool overrite, ref CodeTemplate template)
	{
		if( overrite || (!File.Exists(fullPath)) )
		{
			CopyPropertiesTo(template);
			template.RenderToFile(fullPath, overrite);
		}
	}
	
	/// Copies all properties to a template
	/// Renders the file 
	/// NB. the overrite property
	/// Set Property SourceTable
	public void RenderFileUsingProperties(string fullPath, bool overrite, ref CodeTemplate template,TableSchema SourceTable)
	{
		if( overrite || (!File.Exists(fullPath)) )
		{
			CopyPropertiesTo(template);
			template.SetProperty("SourceTable",SourceTable);
			template.RenderToFile(fullPath, overrite);
		}
	}
	
	/// Copies all properties to a template
	/// Renders the file  using the preserve regions merge stratagy
	public void MergeFileUsingPreserve(string fullPath, ref CodeTemplate template)
	{		
		CodeSmith.Engine.PreserveRegionsMergeStrategy preserveRegionsMergeStrategy = new PreserveRegionsMergeStrategy();
		preserveRegionsMergeStrategy.Language = "C#";
		preserveRegionsMergeStrategy.RegionNameRegex = "PRESERVE";
		CopyPropertiesTo(template);
		template.RenderToFile(fullPath,preserveRegionsMergeStrategy);
	}
	/// Copies all properties to a template
	/// Renders the file  using the preserve regions merge stratagy
	/// Set Property SourceTable
	public void MergeFileUsingPreserve(string fullPath, ref CodeTemplate template,TableSchema SourceTable)
	{		
		CodeSmith.Engine.PreserveRegionsMergeStrategy preserveRegionsMergeStrategy = new PreserveRegionsMergeStrategy();
		preserveRegionsMergeStrategy.Language = "C#";
		preserveRegionsMergeStrategy.RegionNameRegex = "PRESERVE";
		CopyPropertiesTo(template);
		template.SetProperty("SourceTable",SourceTable);
		template.RenderToFile(fullPath,preserveRegionsMergeStrategy);
	}
	/// Copies all properties to a template
	/// Renders the file  using the Insert Region merge strategy
	public void MergeFileUsingInsert(string fullPath, ref CodeTemplate template)
	{		
		CodeSmith.Engine.InsertRegionMergeStrategy mergeStrategy = new InsertRegionMergeStrategy();
		mergeStrategy.Language = "C#";
		mergeStrategy.RegionName = "PRESERVE";
		CopyPropertiesTo(template);
		template.RenderToFile(fullPath,mergeStrategy);
		
	}
	/// Copies all properties to a template
	/// Renders the file  using the Insert Region merge strategy
	/// Set Property SourceTable
	public void MergeFileUsingInsert(string fullPath, ref CodeTemplate template,TableSchema SourceTable)
	{		
		CodeSmith.Engine.InsertRegionMergeStrategy mergeStrategy = new InsertRegionMergeStrategy();
		mergeStrategy.Language = "C#";
		mergeStrategy.RegionName = "PRESERVE";
		CopyPropertiesTo(template);
		template.SetProperty("SourceTable",SourceTable);
		template.RenderToFile(fullPath,mergeStrategy);
		
	}
	#endregion
#endregion	

#region Inner Classes	
	#region TableUtilities Class
	public class TableUtilities
	{
		public static bool SkipTable(TableSchema table)
		{
			return (table.PrimaryKey == null || table.Columns.Count < 2);
		}
		public static TableSchemaCollection FilterTables(TableSchemaCollection tables)
        {			
            TableSchemaCollection filtered = new TableSchemaCollection();
            foreach(TableSchema table in tables) 
            {
                if(!SkipTable(table)) filtered.Add(table);
            }
            return filtered;
        }
	}
	
	public static string GetClassName(TableSchema table)
    {
		/*
        if (table.Name.EndsWith("s"))
        {
            return table.Name.Substring(0, table.Name.Length - 1);
        }
        else
        {
            return table.Name;
        }
		*/
		if(table==null)
		{
		    return null;
		}
		return table.Name;
    }
	#endregion
#endregion	
</script>